<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ce.st.pay.dao.PayFlowDao">

    <resultMap type="cn.ce.st.pay.entity.PayFlowEntity" id="PayFlowMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="isDeleted" column="is_deleted" jdbcType="INTEGER"/>
        <result property="creatorId" column="creator_id" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="deleteTime" column="delete_time" jdbcType="TIMESTAMP"/>
        <result property="flowId" column="flow_id" jdbcType="VARCHAR"/>
        <result property="orderId" column="order_id" jdbcType="VARCHAR"/>
        <result property="orderType" column="order_type" jdbcType="INTEGER"/>
        <result property="payStatus" column="pay_status" jdbcType="INTEGER"/>
        <result property="refundStatus" column="refund_status" jdbcType="INTEGER"/>
        <result property="payType" column="pay_type" jdbcType="INTEGER"/>
        <result property="payAmount" column="pay_amount" jdbcType="DOUBLE"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="PayFlowMap">
        select
          id, is_deleted, creator_id, create_time, update_time, delete_time, flow_id, order_id, order_type, pay_status, refund_status, pay_type, pay_amount
        from stu_test.t_pay_flow
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="PayFlowMap">
        select
          id, is_deleted, creator_id, create_time, update_time, delete_time, flow_id, order_id, order_type, pay_status, refund_status, pay_type, pay_amount
        from stu_test.t_pay_flow
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="PayFlowMap" parameterType="cn.ce.st.pay.model.req.PayFlowReq">
        select
          id, is_deleted, creator_id, create_time, update_time, delete_time, flow_id, order_id, order_type, pay_status, refund_status, pay_type, pay_amount
        from stu_test.t_pay_flow
        <where>

            <if test="isDeleted != null">
                and is_deleted = #{isDeleted}
            </if>
            <if test="creatorId != null">
                and creator_id = #{creatorId}
            </if>
            <if test="createTimeStart != null">
                and <![CDATA[ create_time >= #{createTimeStart} ]]>
            </if>
            <if test="createTimeEnd != null">
                and <![CDATA[ create_time <= #{createTimeEnd} ]]>
            </if>
            <if test="updateTimeStart != null">
                and <![CDATA[ update_time >= #{updateTimeStart} ]]>
            </if>
            <if test="updateTimeEnd != null">
                and <![CDATA[ update_time <= #{updateTimeEnd} ]]>
            </if>
            <if test="deleteTimeStart != null">
                and <![CDATA[  delete_time >= #{deleteTimeStart} ]]>
            </if>
            <if test="deleteTimeEnd != null">
                and <![CDATA[  delete_time <= #{deleteTimeEnd} ]]>
            </if>
            <if test="flowId != null and flowId != ''">
                and flow_id = #{flowId}
            </if>
            <if test="orderId != null and orderId != ''">
                and order_id = #{orderId}
            </if>
            <if test="orderType != null">
                and order_type = #{orderType}
            </if>
            <if test="payStatus != null">
                and pay_status = #{payStatus}
            </if>
            <if test="refundStatus != null">
                and refund_status = #{refundStatus}
            </if>
            <if test="payType != null">
                and pay_type = #{payType}
            </if>
            <if test="payAmount != null">
                and pay_amount = #{payAmount}
            </if>
        </where>
    </select>
    <select id="count" resultType="java.lang.Integer" parameterType="cn.ce.st.pay.model.req.PayFlowReq">
        select
        count(0)
        from stu_test.t_pay_flow
        <where>

            <if test="isDeleted != null">
                and is_deleted = #{isDeleted}
            </if>
            <if test="creatorId != null">
                and creator_id = #{creatorId}
            </if>
            <if test="createTimeStart != null">
                and <![CDATA[ create_time >= #{createTimeStart} ]]>
            </if>
            <if test="createTimeEnd != null">
                and <![CDATA[ create_time <= #{createTimeEnd} ]]>
            </if>
            <if test="updateTimeStart != null">
                and <![CDATA[ update_time >= #{updateTimeStart} ]]>
            </if>
            <if test="updateTimeEnd != null">
                and <![CDATA[ update_time <= #{updateTimeEnd} ]]>
            </if>
            <if test="deleteTimeStart != null">
                and <![CDATA[  delete_time >= #{deleteTimeStart} ]]>
            </if>
            <if test="deleteTimeEnd != null">
                and <![CDATA[  delete_time <= #{deleteTimeEnd} ]]>
            </if>
            <if test="flowId != null and flowId != ''">
                and flow_id = #{flowId}
            </if>
            <if test="orderId != null and orderId != ''">
                and order_id = #{orderId}
            </if>
            <if test="orderType != null">
                and order_type = #{orderType}
            </if>
            <if test="payStatus != null">
                and pay_status = #{payStatus}
            </if>
            <if test="refundStatus != null">
                and refund_status = #{refundStatus}
            </if>
            <if test="payType != null">
                and pay_type = #{payType}
            </if>
            <if test="payAmount != null">
                and pay_amount = #{payAmount}
            </if>
        </where>
    </select>
    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into stu_test.t_pay_flow(is_deleted, creator_id, create_time, update_time, delete_time, flow_id, order_id, order_type, pay_status, refund_status, pay_type, pay_amount)
        values (#{isDeleted}, #{creatorId}, #{createTime}, #{updateTime}, #{deleteTime}, #{flowId}, #{orderId}, #{orderType}, #{payStatus}, #{refundStatus}, #{payType}, #{payAmount})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update stu_test.t_pay_flow
        <set>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted},
            </if>
            <if test="creatorId != null">
                creator_id = #{creatorId},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="deleteTime != null">
                delete_time = #{deleteTime},
            </if>
            <if test="flowId != null and flowId != ''">
                flow_id = #{flowId},
            </if>
            <if test="orderId != null and orderId != ''">
                order_id = #{orderId},
            </if>
            <if test="orderType != null">
                order_type = #{orderType},
            </if>
            <if test="payStatus != null">
                pay_status = #{payStatus},
            </if>
            <if test="refundStatus != null">
                refund_status = #{refundStatus},
            </if>
            <if test="payType != null">
                pay_type = #{payType},
            </if>
            <if test="payAmount != null">
                pay_amount = #{payAmount},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from stu_test.t_pay_flow where id = #{id}
    </delete>

</mapper>